// <auto-generated />
using System;
using MessagingWithDatabase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MessagingWithDatabase.Migrations
{
    [DbContext(typeof(Model))]
    partial class ModelModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MessagingWithDatabase.Group", b =>
                {
                    b.Property<int?>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("GroupID"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupAdminUserID")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageByteArray")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupID");

                    b.HasIndex("GroupAdminUserID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("MessagingWithDatabase.GroupMessage", b =>
                {
                    b.Property<int?>("GroupMessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("GroupMessageID"));

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SenderUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.HasKey("GroupMessageID");

                    b.HasIndex("GroupID");

                    b.ToTable("GroupMessages");
                });

            modelBuilder.Entity("MessagingWithDatabase.Message", b =>
                {
                    b.Property<int?>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("MessageID"));

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReceiverUserID")
                        .HasColumnType("int");

                    b.Property<int?>("SenderUserID")
                        .HasColumnType("int");

                    b.Property<bool>("bSeen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MessagingWithDatabase.User", b =>
                {
                    b.Property<int?>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("GroupID")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageByteArray")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("visibilty")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("GroupID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MessagingWithDatabase.Group", b =>
                {
                    b.HasOne("MessagingWithDatabase.User", "GroupAdmin")
                        .WithMany()
                        .HasForeignKey("GroupAdminUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupAdmin");
                });

            modelBuilder.Entity("MessagingWithDatabase.GroupMessage", b =>
                {
                    b.HasOne("MessagingWithDatabase.Group", "group")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");
                });

            modelBuilder.Entity("MessagingWithDatabase.User", b =>
                {
                    b.HasOne("MessagingWithDatabase.Group", null)
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupID");

                    b.OwnsOne("System.Collections.Generic.List<int>", "FriendIDs", b1 =>
                        {
                            b1.Property<int>("UserID")
                                .HasColumnType("int");

                            b1.Property<int>("Capacity")
                                .HasColumnType("int");

                            b1.HasKey("UserID");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserID");
                        });

                    b.Navigation("FriendIDs")
                        .IsRequired();
                });

            modelBuilder.Entity("MessagingWithDatabase.Group", b =>
                {
                    b.Navigation("GroupUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
